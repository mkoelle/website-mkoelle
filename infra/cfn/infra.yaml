AWSTemplateFormatVersion: "2010-09-09"
Description: "mkoelle.com - personal site - bucket, bucket policy, cloudfront, OAI, certificate, & associated DNS entry"
Parameters:
  HostedZoneId:
    Type: String
    Description: The Id of an Amazon Route 53 hosted zone to create the alias in.
    ConstraintDescription: must be a valid DNS zone name.
  HostedZoneDomain:
    Type: String
    Description: The DNS name for the root of the hostedzone
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
Resources:
  Content:
    Type: AWS::S3::Bucket
  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${Content} OAI"
  ReadPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref Content
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${Content}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: CDN for S3-backed website
        Aliases:
          - !Sub "${HostedZoneDomain}"
          - !Sub "www.${HostedZoneDomain}"
        ViewerCertificate:
          AcmCertificateArn: !Ref IssuedCertificate
          MinimumProtocolVersion: "TLSv1.2_2018"
          SslSupportMethod: "sni-only"
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: s3origin
          ViewerProtocolPolicy: "redirect-to-https"
        DefaultRootObject: index.html
        CustomErrorResponses:
        - ErrorCode: 404
          ResponsePagePath: "/index.html"
          ResponseCode: 200
        - ErrorCode: 403
          ResponsePagePath: "/index.html"
          ResponseCode: 200
        PriceClass: "PriceClass_100"
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: s3origin
            DomainName: !GetAtt "Content.DomainName"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
  DomainDns:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      RecordSets:
        - Name: !Sub "${HostedZoneDomain}"
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CDN.DomainName
        - Name: !Sub "www.${HostedZoneDomain}"
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CDN.DomainName
  Certificate:
    Type: Custom::Certificate
    Properties:
      DomainName: !Sub "${HostedZoneDomain}"
      SubjectAlternativeNames:
      - Fn::Join:
        - "."
        - - "*"
          - !Sub "${HostedZoneDomain}"
      ValidationMethod: DNS
      ServiceToken:
        Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider
  IssuedCertificate:
    Type: Custom::IssuedCertificate
    Properties:
      CertificateArn:
        Ref: Certificate
      ServiceToken:
        Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider
  CertificateDNSRecord:
    Type: Custom::CertificateDNSRecord
    Properties:
      CertificateArn:
        Ref: Certificate
      DomainName: !Sub "${HostedZoneDomain}"
      ServiceToken:
        Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider
  DomainValidationRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      RecordSets:
      - Name:
          Fn::GetAtt:
          - CertificateDNSRecord
          - Name
        Type:
          Fn::GetAtt:
          - CertificateDNSRecord
          - Type
        TTL: '60'
        Weight: 1
        SetIdentifier:
          Ref: Certificate
        ResourceRecords:
        - Fn::GetAtt:
          - CertificateDNSRecord
          - Value
Outputs:
  BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref Content
    Export:
      Name: 
        Fn::Sub: ${AWS::StackName}-content-bucket
  DistributionId:
    Description: "CloudFront Distribution ID"
    Value: !Ref CDN
  Domain:
    Description: "Cloudfront Domain"
    Value: !GetAtt CDN.DomainName
